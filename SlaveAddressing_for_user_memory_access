#include "main.h"
#include <stdio.h>
#include <string.h>

I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart2;

#define NFC_WRITE_ADDRESS 0xA6  // 8-bit I2C write address of the NFC tag
#define NFC_READ_ADDRESS  0xA7  // 8-bit I2C read address of the NFC tag

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();

  uint8_t data[8];
  HAL_StatusTypeDef status;

  while (1)
  {
    uint8_t cmd = 0x00;  // Command or address to send to the NFC tag
    status = HAL_I2C_Master_Transmit(&hi2c1, NFC_WRITE_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
    if (status != HAL_OK)
    {
      sprintf((char *)data, "Error: %d\n", status);
      HAL_UART_Transmit(&huart2, data, strlen((char *)data), HAL_MAX_DELAY);
      continue;
    }

    status = HAL_I2C_Master_Receive(&hi2c1, NFC_READ_ADDRESS, data, 8, HAL_MAX_DELAY);
    if (status == HAL_OK)
    {
      HAL_UART_Transmit(&huart2, data, 8, HAL_MAX_DELAY);
      HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
    }
    else
    {
      sprintf((char *)data, "Error: %d\n", status);
      HAL_UART_Transmit(&huart2, data, strlen((char *)data), HAL_MAX_DELAY);
    }

    HAL_Delay(1000);
  }
}

void SystemClock_Config(void)
{
  // Clock configuration code generated by STM32CubeMX
}

static void MX_GPIO_Init(void)
{
  // GPIO initialization code generated by STM32CubeMX
}

static void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
}

static void MX_I2C1_Init(void)
{
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  while (1)
  {
    // Error handling code
  }
}
